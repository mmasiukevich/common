name: "Continuous Integration"

on: [push, pull_request]

jobs:
  code-style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          coverage: none
          tools: composer:v2

      - name: Install dependencies with composer
        run: composer install -ov

      - name: Run php-cs-fixer
        run: ./vendor/bin/php-cs-fixer fix --allow-risky=yes --dry-run --using-cache=no --verbose

  psalm:
    name: Psalm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          coverage: none
          tools: composer:v2

      - name: Install dependencies with composer
        run: composer install -ov

      - name: Run vimeo/psalm
        run: ./vendor/bin/psalm --config=psalm.xml

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          coverage: none
          tools: composer:v2

      - name: Install dependencies with composer
        run: composer install -ov

      - name: Run phpstan/phpstan
        run: ./vendor/bin/phpstan analyse src --level 7

  phpunit:
    name: PHPUnit

    runs-on: ${{ matrix.os }}

    env:
      PHP_EXTENSIONS: dom, json, mbstring
      PHP_INI_VALUES: assert.exception=1, zend.assertions=1

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

        php-version:
          - "8.0"
          - "8.1"

        compiler:
          - default

        dependencies:
          - lowest
          - highest

        include:
          - os: ubuntu-latest
            php-version: "8.0"
            compiler: jit
            dependencies: highest

          - os: ubuntu-latest
            php-version: "8.1"
            compiler: jit
            dependencies: highest

    steps:
      - name: Configure git to avoid issues with line endings
        if: matrix.os == 'windows-latest'
        run: git config --global core.autocrlf false

      - name: Checkout
        uses: actions/checkout@v2

      - name: Override PHP ini values for JIT compiler
        if: matrix.compiler == 'jit'
        run: echo "PHP_INI_VALUES::assert.exception=1, zend.assertions=1, opcache.enable=1, opcache.enable_cli=1, opcache.optimization_level=-1, opcache.jit=1255, opcache.jit_buffer_size=32M" >> $GITHUB_ENV

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: pcov
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: ${{ env.PHP_INI_VALUES }}

      - name: Determine composer cache directory on Linux
        if: matrix.os == 'ubuntu-latest'
        run: echo "COMPOSER_CACHE_DIR=$(./tools/composer config cache-dir)" >> $GITHUB_ENV

      - name: Determine composer cache directory on Windows
        if: matrix.os == 'windows-latest'
        run: ECHO "COMPOSER_CACHE_DIR=~\AppData\Local\Composer" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Cache dependencies installed with composer
        uses: actions/cache@v2
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-
      - name: Install lowest dependencies with composer
        if: matrix.dependencies == 'lowest'
        run: php ./tools/composer update --no-ansi --no-interaction --no-progress --prefer-lowest

      - name: Install highest dependencies with composer
        if: matrix.dependencies == 'highest'
        run: php ./tools/composer update --no-ansi --no-interaction --no-progress

      - name: Run tests with phpunit
        run: php ./vendor/bin/phpunit --configuration ./phpunit.xml --coverage-clover=coverage.clover

      - name: Send code coverage report to Scrutinizer
        if: "${{ matrix.php-version != '8.0' }}"
        run: |
          wget https://scrutinizer-ci.com/ocular.phar
          php ocular.phar code-coverage:upload --format=php-clover coverage.clover